The design for homework 5 OOD 3500.
PLEASE READ ALL:
The structure for our design is as follows:

Interface: Animation

Implmentation class for animation: Class AnimationImpl

Classes that the AnimationImpl Calls on but these do not extend: Class Frame + Class AnimationDescription

Class that the Frame Calls on these do not extend: Class TwoDShapeImpl


Property classes for a TwoDShapeImpl which implements Interface TwoDShape:
Class Posn,
Class Dim,
(Java given class Color)
Enum ShapesAllow

Rect and Oval Extend TwoDShapeImpl:
This is because a Rect dimension is width and height.
Oval dimension is radius and radius. There iwll be a visitor later that will determine which.


So to clarify what is being said above.
The user of our application will interation with the model of our animation. The model knows of the existance of shapes, frames, and the animationDescription.
The user has NO knowledge of any of these design implimentations, he will only interact with primitive data to our model such as strings and ints.
The models functionality is as simple as it gets as well, it can only handle play the animation, placing shapes into a frame given a direction from user, 
such as remain same or do this "motion" (posn change, color change, dim change). The model can also add frames and check to make sure if a shape has been used. 
So make the description we call a completely seperate class called AnimationDescription to keep it as inpedendant from model as possible. It calls getter on the String field of that class.
Below has the fields for the classes to help visuallize how the classes interact.

AnimationDescription contatins:
Description:  string

Model contains:
List of shapes created so far,  ArrayList<class>
List of Frames                 ArrayList<class>

Frame contains:
List of shapes in that frame  ArrayList<class>
Tick value of Frame           int

TwoDShapeImpl contains:
Name       String
Posn,      class
Dimension, class
Color,    class
ShapeType enum

Posn contains:
X-cord int
Y-cord int

Dim contains:
Width int
Height int

Color contains:
(this is java built in, we feed it the 3 ints)

ShapeAllow contains:
name of shapetype as String


INVARIANCES:
Positon invariants:
Position cant be any int value

Dimension invariants:
Dimentsion cannot be be negative

Color invariants:
Color cannot be given negative or over 255 per component

TwoDShapeImpl invariants:
A Shape must be created before being given a direction by user
A shape can never have no name or shapetype
All strings beside name of shape are generated by the program'
There exist no setters, to every time a change is made to shape a new shape is made.

Frame Invariants:
The list of shapesInFrame cannot be overwritten with another list.
Each frame must have a non negative included tick int tick value.


AnimationImpl Invariants:
The description of an empty animation is ""
The list of createdShapes cannot beoverwritten with another list.
The list of frames cannot be overwritten with another list.


ANIMATION DESCRIPTION:
If you look in tests it differs slightly from the the assigmnet. This is DESIGN CHOICE.
Our design model allows us to modularize the text very well in which the string starts at the shape and
then moves to the model and then to a seperate class to fix. This is a clean and linear process.
The assigment is not only not as informative but requires the model to hold information it shouldnt.
We believed that this was a good design implmentation.



